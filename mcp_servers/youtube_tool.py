import os
from googleapiclient.discovery import build
from typing import List, Dict, Optional, Union
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api._errors import TranscriptsDisabled, NoTranscriptFound
from pydantic import Field
from pydantic.fields import FieldInfo
from oxygent import oxy


class YouTubeTranscriptError(Exception):
    """Custom exception for YouTube transcript errors"""
    pass


def get_youtube_transcript(
        video_id: str,
        languages: Union[str, List[str]] = ['en'],
        include_autogenerated: bool = False,
        format: str = 'text'
) -> Union[str, List[Dict]]:
    """
    Retrieves the transcript/subtitles for a YouTube video

    Args:
        video_id: YouTube video ID
        languages: List of preferred language codes or a single language code
        include_autogenerated: Whether to include automatically generated transcripts
        format: Return format - 'text' for combined text or 'list' for raw transcript data

    Returns:
        Combined text as string, or transcript data as list of dictionaries

    Raises:
        YouTubeTranscriptError: When unable to retrieve transcript
    """
    try:
        # Get the list of available transcripts for the video
        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)

        # Build a list of available transcript languages
        available_languages = []
        for transcript in transcript_list:
            available_languages.append(transcript.language_code)

        # Ensure languages parameter is a list
        if isinstance(languages, str):
            languages = [languages]

        # Try to get an original transcript in preferred language
        transcript = None
        for lang in languages:
            try:
                transcript = transcript_list.find_transcript([lang])
                if transcript:
                    break
            except:
                continue

        # If no preferred language transcript found but autogeneration allowed
        if not transcript and include_autogenerated:
            # Look for autogenerated transcripts
            for lang in languages:
                try:
                    # Find autogenerated transcript or translation
                    gen_list = transcript_list.find_generated_transcript([lang])
                    if gen_list:
                        transcript = gen_list
                        break
                except:
                    continue

        # If still no transcript found, try any available language
        if not transcript and available_languages:
            try:
                transcript = transcript_list.find_transcript([available_languages[0]])
            except:
                pass

        # If no transcript found at all
        if not transcript:
            raise NoTranscriptFound(video_id, languages, include_autogenerated)

        # Fetch the actual transcript content
        transcript_data = transcript.fetch()

        # Return result in requested format
        if format == 'text':
            return " ".join([item['text'] for item in transcript_data.to_raw_data()])
        else:
            return transcript_data

    except (TranscriptsDisabled, NoTranscriptFound) as e:
        raise YouTubeTranscriptError(f"Transcript not found for video: {str(e)}")
    except Exception as e:
        raise YouTubeTranscriptError(f"Failed to retrieve transcript: {str(e)}")


class YouTubeToolError(Exception):
    """Custom exception for YouTube tool errors"""
    pass


def get_video_details(
        video_id: str,
        properties: List[str] = ["title", "description", "published_at", "channel_title", "duration", "view_count",
                                 "like_count", "comment_count"]
) -> Optional[dict]:
    """
    Retrieves detailed information about a YouTube video

    Args:
        video_id: YouTube video ID (11-character string)
        properties: List of properties to return. Default includes all available properties.

    Returns:
        Dictionary with requested video properties, or None if video not found.

    Raises:
        YouTubeToolError: For API request failures or missing API key
    """
    # Get API key from environment variable
    api_key = os.getenv('YOUTUBE_API_KEY')

    if not api_key or api_key == "YOUR_API_KEY":
        raise YouTubeToolError("Missing or invalid YouTube API key. Set the YOUTUBE_API_KEY environment variable.")

    try:
        # Ensure properties is a valid list
        if isinstance(properties, str):
            properties = [properties]
        elif not properties:
            properties = ["title", "description", "published_at", "channel_title",
                          "duration", "view_count", "like_count", "comment_count"]

        # Create YouTube API service
        youtube = build('youtube', 'v3', developerKey=api_key)

        # Determine which parts to request
        parts = set()
        snippet_props = ['title', 'description', 'published_at', 'publishedAt', 'channel_title', 'channelTitle',
                         'tags', 'category_id', 'categoryId', 'snippet']
        stats_props = ['view_count', 'viewCount', 'like_count', 'likeCount', 'comment_count', 'commentCount',
                       'statistics']
        details_props = ['duration', 'contentDetails']

        if any(p in properties for p in snippet_props):
            parts.add('snippet')
        if any(p in properties for p in stats_props):
            parts.add('statistics')
        if any(p in properties for p in details_props):
            parts.add('contentDetails')

        if not parts:
            parts = {'snippet', 'statistics', 'contentDetails'}

        # Request video information
        request = youtube.videos().list(
            part=','.join(parts),
            id=video_id
        )
        response = request.execute()

        # Check if there are results
        if not response.get('items'):
            return None

        # Extract core information
        item = response['items'][0]
        snippet = item.get('snippet', {})
        stats = item.get('statistics', {})
        content_details = item.get('contentDetails', {})

        # Build result dictionary
        result = {}
        property_map = {
            'title': snippet.get('title'),
            'description': snippet.get('description'),
            'published_at': snippet.get('publishedAt'),
            'channel_title': snippet.get('channelTitle'),
            'tags': snippet.get('tags', []),
            'category_id': snippet.get('categoryId'),
            'duration': content_details.get('duration'),
            'view_count': stats.get('viewCount'),
            'like_count': stats.get('likeCount', 0),
            'comment_count': stats.get('commentCount', 0)
        }

        # Filter requested properties
        for prop in properties:
            if prop in property_map:
                result[prop] = property_map[prop]
            else:
                # # Provide helpful error message
                # valid_props = list(property_map.keys())
                # raise YouTubeToolError(f"Invalid property '{prop}'. Valid properties are: {', '.join(valid_props)}")
                return property_map

        return result

    except Exception as e:
        raise YouTubeToolError(f"YouTube API request failed: {str(e)}") from e


youtube_tools = oxy.FunctionHub(name="youtube_apis", timeout=900)


@youtube_tools.tool(description="Retrieves detailed information about a YouTube video")
def get_video_details_api(
        video_id: str = Field(description="YouTube video ID", examples=["dQw4w9WgXcQ", "kBdfcR-8hEY"]),
        properties: List[str] = Field(
            description="Properties to include in the response",
            default=["title", "description", "published_at", "channel_title", "duration", "view_count",
                     "like_count", "comment_count"],
            examples=[["title", "description"], ["view_count", "like_count"]]
        )
) -> dict:
    """
    Retrieves detailed information about a YouTube video through the YouTube Data API.

    Example usage:
    # >>> get_video_details_api(video_id="dQw4w9WgXcQ", properties=["title", "view_count"])
    {
        "title": "Rick Astley - Never Gonna Give You Up",
        "view_count": "1360000000"
    }
    """
    # Extract actual properties list (handle Field object)
    actual_properties = properties
    if hasattr(properties, '__args__') or hasattr(properties, 'default'):
        actual_properties = ["title", "description", "published_at", "channel_title",
                             "duration", "view_count", "like_count", "comment_count"]

    return get_video_details(video_id, actual_properties)


@youtube_tools.tool(description="Retrieves transcript/subtitles for a YouTube video")
def get_youtube_transcript_api(
        video_id: str = Field(description="YouTube video ID", examples=["dQw4w9WgXcQ", "Ft68cUiw1ps"]),
        languages: Union[str, List[str]] = Field(
            description="Preferred language(s) for the transcript",
            default=['en'],
            examples=[['en'], ['fr', 'de'], 'es']
        ),
        include_autogenerated: bool = Field(
            description="Include automatically generated transcripts if preferred not available",
            default=False
        ),
        format: str = Field(
            description="Output format - 'text' for combined text or 'list' for original data",
            default='text',
            examples=['text', 'list']
        )
) -> Union[str, List[Dict]]:
    """
    Retrieves the transcript/subtitles for a YouTube video in the specified language

    Example usage:
    # >>> get_youtube_transcript_api(video_id="dQw4w9WgXcQ")
    "Never gonna give you up Never gonna let you down..."

    # >>> get_youtube_transcript_api(video_id="dQw4w9WgXcQ", format="list")
    [{'text': 'Never gonna give you up', 'start': 0.0, 'duration': 3.0}, ...]
    """
    if isinstance(languages, FieldInfo):
        languages = languages.default
    if isinstance(include_autogenerated, FieldInfo):
        include_autogenerated = include_autogenerated.default
    if isinstance(format, FieldInfo):
        format = format.default
    return get_youtube_transcript(
        video_id=video_id,
        languages=languages,
        include_autogenerated=include_autogenerated,
        format=format
    )


# Example usage
if __name__ == '__main__':

    from dotenv import load_dotenv
    from pathlib import Path  # python3 only

    env_path = Path('../examples/gaia/') / '.env'
    load_dotenv(dotenv_path=env_path, verbose=True)
    ## Test valid request
    print("Testing video details retrieval:")
    details = get_video_details_api(
        video_id="dQw4w9WgXcQ",
        properties=["title", "channel_title", "view_count", "like_count"]
    )
    print(f"Title: {details['title']}")
    print(f"Channel: {details['channel_title']}")
    print(f"Views: {details['view_count']}")
    print(f"Likes: {details['like_count']}")

    # Test partial properties
    print("\nTesting partial properties:")
    partial_details = get_video_details_api(
        video_id="dQw4w9WgXcQ",
        properties=["duration", "comment_count"]
    )
    print(f"Duration: {partial_details['duration']}")
    print(f"Comments: {partial_details['comment_count']}")

    # Test invalid video ID
    print("\nTesting invalid video ID:")
    try:
        invalid_result = get_video_details_api(video_id="INVALID_ID")
        print(f"Result: {invalid_result or 'Video not found'}")
    except Exception as e:
        print(f"Error: {str(e)}")

    # Test getting combined text
    print("Testing transcript retrieval:")
    try:
        transcript = get_youtube_transcript_api(
            video_id="dQw4w9WgXcQ",  # Rick Astley - Never Gonna Give You Up
            languages=['en'],
            format='text'
        )
        print(f"First 100 characters of transcript: {transcript[:100]}...")
    except Exception as e:
        print(f"Error: {str(e)}")

    # Test getting raw data
    print("\nTesting raw transcript data:")
    try:
        transcript_data = get_youtube_transcript_api(
            video_id="Ft68cUiw1ps",  # Another example video
            languages=['fr', 'de'],
            include_autogenerated=True,
            format='text'
        )
        print(f"First 100 characters of transcript: {transcript_data[:100]}...")
    except Exception as e:
        print(f"Error: {str(e)}")

    # Test invalid video ID
    print("\nTesting invalid video ID for transcript:")
    try:
        invalid_result = get_youtube_transcript_api(video_id="INVALID_ID")
        print(f"Result: {invalid_result}")
    except Exception as e:
        print(f"Error: {str(e)}")